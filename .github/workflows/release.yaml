name: Release

on:
  workflow_dispatch:
    inputs:
      min_version:
        description: The minimum kernel version
        default: v5.10
        required: true
      max_version:
        description: The maximum kernel version
        default: ""
        required: true

jobs:
  versions:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Populate output versions
      id: read_versions
      env:
        MIN_VERSION: ${{ github.event.inputs.min_version }}
        MAX_VERSION: ${{ github.event.inputs.max_version }}
      run: |
        set -o errexit -o nounset -o pipefail
        curl -LO https://raw.githubusercontent.com/fsaintjacques/semver-tool/3.2.0/src/semver
        chmod +x semver
        repo_root=$(git rev-parse --show-toplevel)
        versions_txt="${repo_root}/versions.txt"
        versions=()
        while read v; do
          if [ -z "${v}" ]; then
            continue
          fi
          compare_min=$(./semver compare "${v:1}.0" "${MIN_VERSION:1}.0")
          compare_max=$(./semver compare "${v:1}.0" "${MAX_VERSION:1}.0")
          if [ "${compare_min}" -ge 0 ] && [ "${compare_max}" -le 0 ]; then
            versions+=("${v}")
          fi
        done < "${versions_txt}"
        json_versions=$(jq --raw-input --compact-output --slurp 'gsub("[\\n]"; "") | split(" ")' <<<"${versions[@]}")
        echo "::set-output name=versions::${json_versions}"
    - name: Cache config fragments
      uses: actions/cache@v2
      with:
        path: .config_fragments
        key: config_fragments
    outputs:
      versions: ${{ steps.read_versions.outputs.versions }}
  build:
    needs: versions
    strategy:
      matrix:
        version: ${{ fromJson(needs.versions.outputs.versions) }}
    runs-on: ubuntu-latest
    steps:
    - name: Install dependencies
      run: |
        set -o errexit -o nounset -o pipefail
        sudo apt-get update
        sudo apt-get install -y \
          bc \
          bison \
          flex \
          gcc \
          libelf-dev \
          make
    - name: Checkout kernel
      uses: actions/checkout@v2
      with:
        repository: torvalds/linux
        ref: ${{ matrix.version }}
    - name: Cache config fragments
      uses: actions/cache@v2
      with:
        path: .config_fragments
        key: config_fragments
    - name: Print config fragments
      run: cat .config_fragments
    - name: Configure kernel
      run: |
        set -o errexit -o nounset -o pipefail
        make x86_64_defconfig
        ./scripts/kconfig/merge_config.sh .config .config_fragments
    - name: Build kernel
      id: build
      run: |
        set -o errexit -o nounset -o pipefail
        echo "::set-output name=built_on::$(uname -a | sed 's/~/\\~/g')"
        echo "::set-output name=gcc_version::$(gcc --version | head -n 1)"
        time make vmlinux --jobs=$(nproc)
        tar -czvf vmlinux-${{ matrix.version }}.tar.gz vmlinux
    - name: Upload kernel
      uses: actions/upload-artifact@v2
      with:
        name: vmlinux-${{ matrix.version }}.tar.gz
        path: vmlinux-${{ matrix.version }}.tar.gz
        retention-days: 1
    outputs:
      built_on: ${{ steps.build.outputs.built_on }}
      gcc_version: ${{ steps.build.outputs.gcc_version }}
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Set variables
      id: set_variables
      run: |
        echo "::set-output name=date::$(date '+%d%m%Y')"
    - name: Download artifacts
      uses: actions/download-artifact@v2
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        name: release-${{ steps.set_variables.outputs.date }}
        tag_name: release-${{ steps.set_variables.outputs.date }}
        body: |-
          Crafted with care for you!

          Built on (uname -a): ${{ needs.build.outputs.built_on }}
          C++ compiler (gcc --version): ${{ needs.build.outputs.gcc_version }}
        draft: true
        fail_on_unmatched_files: true
        files: '**/vmlinux-*.tar.gz'
